## 1.jdk ArrayList的的底层实现

1. jdk1.7  int size  [] elementData  初始化ArrayList  默认初始化一个长度为10的Object数组

每次添加一个元素size加1，当size大于数组的长度时，复制一个原数组1.5倍的新数组。

2. jdk1.8   int size  [] elementData  初始化ArrayList  默认初始化一个长度为0的Object数组

	当第一次调用add方法时，将空数组变为长度为10的数组,每次添加一个元素size加1，当size大于数组的长度时，复制一个原数组1.5倍的新数组.



#### 2.Object 的hashCode()方法

1. 把一个数通过一定算法（取余法......），计算出的值的长度固定。那么这种算法称作hash函数

2. 得出的值称作hashCode 也叫散列码。
3. jdk中的hashCode 通过对象的内存地址加hash算法得出的一个散列码.



##2.jdk HashMap的底层实现

### 1.jdk1.7

1. 数组加链表

2. 头擦法

3. 1.7扩容的死循环问题

	1. 多线程环境下

	2. thread1 插入元素，发现容量达到扩容条件,新建新数组，将所有的元素遍历，重hash插入到新数组的过程，并且完成复制的流程

	3. 因为采用的是头插法，如下

		在遍历发生hash碰撞的链表中，首先会把原元素的下一指向指向当前数组的位置，再把原元素放入新数组当中，再进行下一次循环。此时A--------》A1-------->null的链表关系会变为

		A1------------------》A---------》null

		```java 
		 void resize(int newCapacity) {  
		        Entry[] oldTable = table;//老的数据  
		        int oldCapacity = oldTable.length;//获取老的容量值  
		        if (oldCapacity == MAXIMUM_CAPACITY) {//老的容量值已经到了最大容量值  
		            threshold = Integer.MAX_VALUE;//修改扩容阀值  
		            return;  
		        }  
		        //新的结构  
		        Entry[] newTable = new Entry[newCapacity];  
		        transfer(newTable, initHashSeedAsNeeded(newCapacity));//将老的表中的数据拷贝到新的结构中  
		        table = newTable;//修改HashMap的底层数组  
		        threshold = (int)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + 1);//修改阀值  
		    }  
		\\========================================================================
		    //将老的表中的数据拷贝到新的结构中  
		    void transfer(Entry[] newTable, boolean rehash) {  
		        int newCapacity = newTable.length;//容量  
		        for (Entry<K,V> e : table) { //遍历所有桶
		            while(null != e) {  //遍历桶中所有元素（是一个链表）
		                Entry<K,V> next = e.next;  
		                if (rehash) {//如果是重新Hash，则需要重新计算hash值  
		                    e.hash = null == e.key ? 0 : hash(e.key);  
		                }  
		                int i = indexFor(e.hash, newCapacity);//定位Hash桶  
		                e.next = newTable[i];//元素连接到桶中,这里相当于单链表的插入，总是插入在最前面
		                newTable[i] = e;//newTable[i]的值总是最新插入的值
		                e = next;//继续下一个元素  
		            }  
		        }  
		    }  
		
		```

		

	4. thread2 插入元素，发现容量达到扩容条件,也会把原元素的下一指向指向当前数组的位置，再把原元素放入新数组当中，再进行下一次循环。但此时新数组hash碰撞的链表关系已经变为

		A1------------------》A---------》null，而老数组的hash碰撞的第一位依然是A  之后把A位置的下一指向新数组位置的元素，也就是B ，此时就会变为A<--------------------->A1无限循环下去

		

		

### 2.jdk1.8

1. 数组加链表加红黑树
2. 尾插法

##### 具体实现

1. 首先初始化hashMap,默认一个扩容因子0.75

2. put 的hash方法 拿到当前对象的hashCode 做二次散列，扰动函数，得到一个h 后面存放到数组h的位置

	```java 
	   public V put(K key, V value) {
	        //hash方法二次散列加扰动函数，减少hash碰撞的频率
	        return putVal(hash(key), key, value, false, true);
	    }
	//========================================================
	static final int hash(Object key) {
	        int h;
	        //h = key.hashCode()) ^ (h >>> 16  二次hash 加散列
	        return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
	    }
	\\============================================================
	```

	

3. 第一次进入，初始容量为0，数组为null，所以需要初始一个数组

```java 
 if ((tab = table) == null || (n = tab.length) == 0)
            n = (tab = resize()).length;
\\==================================================================================
     //数组长度为0时指定数组的长度为16，再次扩容的瓶颈为16*0.75=12
        else {               // zero initial threshold signifies using defaults
            newCap = DEFAULT_INITIAL_CAPACITY;
            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
        }
\\=================================================================================
     //指定扩容瓶颈
        threshold = newThr;
        @SuppressWarnings({"rawtypes","unchecked"})
                //新建扩容数组
            Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
        table = newTab;
  return newTab;
```



4. 根据hash& 数组长度 求出此元素应放在数组的哪一个位置比较合适。前提是此处元素不能有值

(n-1)&hash() 是一种hash算法，得出来的值就是Hash值,此种算法要求n 为2^n次方的数 

```java 
//(n - 1) & hash 位的与运算，根据hash求出应该放在数组的哪一个位置上比较合适，前提此位置无元素
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);

```







5. 如果此处发生hash碰撞，计算出来的hash值相同，判断此处的键和插入元素的键对象的地址相同，或者非空对象equals方法返回true,就用新值替换旧值.

```java 
 //如果此处的元素的hash和插入元素的hash相同,且（此处的键和插入元素的键对象的地址相同，或者非空对象equals方法返回true)
            //那么就将此处元素的node对象暂存到e
            if (p.hash == hash &&
                ((k = p.key) == key || (key != null && key.equals(k))))
                e = p;
\\==========================================================================
    //如果暂存对象的值不为空
            if (e != null) { // existing mapping for key
                //把原位置节点的值 暂存到V
                V oldValue = e.value;
                if (!onlyIfAbsent || oldValue == null)
                    //把原位置节点的值替换为新值
                    e.value = value;
                afterNodeAccess(e);
                //返回旧值
                return oldValue;
            }
        }
```



6.  如果此处发生hash碰撞,计算出来的hash值不同.

	遍历此处位置的链表,

	吐过链表位置的所有元素都和插入元素不同，就直接把当前元素插入原链表的最后一个位置

	如果链表位置有任意节点满足插入元素的键对象的地址相同，或者非空对象equals方法返回true,就用新值替换旧值.如果链表的长度到达7了，就开始树化.

```java 
 else {
                //无限循环
                for (int binCount = 0; ; ++binCount) {
                    //如果原位置的节点的后面没有元素的话
                    if ((e = p.next) == null) {
                        //直接把插入元素放入原元素的下一个位置
                        p.next = newNode(hash, key, value, null);
                        //如果循环的次数到达第8次也就是原位置的链表已经有7个元素的话，开始树化
                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
                            treeifyBin(tab, hash);
                        break;
                    }
                    //再次判断原位置链表的对象是否和插入元素的hash值相等，（此处的键和插入元素的键对象的地址相同，或者非空对象equals方法返回true)
                    //是的话把原位置节点暂存到e
                    if (e.hash == hash &&
                        ((k = e.key) == key || (key != null && key.equals(k))))
                        //判断是统一元素，覆盖旧值
                        break;
                    p = e;
                }
            }
```

7. hashMap扩容的方法:

	1. 如果数组元素达到容量的0.75时开始扩容。扩容长度为原数组的左移2位

		```java 
		        //如果数组的容量超过了0.75*容量（初始16）进行扩容
		        if (++size > threshold)
		            resize();
		//================================================================
		//新数组长度为原有数组左移以为即*2  新数组长度不能大于规定的最大长度，并且就有数组长度要大于等于 默认原始容量16
		            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&
		                     oldCap >= DEFAULT_INITIAL_CAPACITY)
		                //新数组的扩容瓶颈为旧瓶颈的左移以为即使 12*2 24
		                newThr = oldThr << 1; // double threshold
		        }
		//=======================================================
		 //指定扩容瓶颈
		        threshold = newThr;
		        @SuppressWarnings({"rawtypes","unchecked"})
		                //新建扩容数组
		            Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];
		        table = newTab;
		        //如果超过初始化数组长度的话，进行扩容
		        if (oldTab != null) {
		            for (int j = 0; j < oldCap; ++j) {
		                Node<K,V> e;
		                //将原有数组的位置值暂存到e
		                if ((e = oldTab[j]) != null) {
		                    //将原有数组的位置元素至为null
		                    oldTab[j] = null;
		                    //如果原有数组位置的元素没有一个元素的话
		                    if (e.next == null)
		                        //重新hash,e.hash & (newCap - 1)直接求得该元素的hash值，将原有元素，放入新数组的位置中
		                        newTab[e.hash & (newCap - 1)] = e;
		                    else if (e instanceof TreeNode)
		                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);
		                    //如果原有数组位置的元素还有下一个元素的话，采用高效算法算出hash值遍历，
		                    //e.hash & oldCap的取出的值如果为0位置不变，取出的值如果为1位置为当前位置 + oldCap
		                    else
		                    { // preserve order
		                        Node<K,V> loHead = null, loTail = null;
		                        Node<K,V> hiHead = null, hiTail = null;
		                        Node<K,V> next;
		                        do {
		                            next = e.next;
		                            if ((e.hash & oldCap) == 0) {
		                                //首位低位元素赋值
		                                if (loTail == null)
		                                    loHead = e;
		                                //后续低位元素赋值
		                                else
		                                    loTail.next = e;
		                                //更新末尾元素
		                                loTail = e;
		                            }
		                            else {
		                                //首位高位元素赋值
		                                if (hiTail == null)
		                                    hiHead = e;
		                                //后续高位元素赋值
		                                else
		                                    hiTail.next = e;
		                                //更新高位末尾元素
		                                hiTail = e;
		                            }
		                            //遍历原位置所有链表元素
		                        } while ((e = next) != null);
		                        //最后一位低位元素取完，节点串联完
		                        if (loTail != null) {
		                            //更新最后一位低位元素取完的下一位元素为0
		                            loTail.next = null;
		                            //把低位首位元素放入数组
		                            newTab[j] = loHead;
		                        }
		                        //最后一位高位元素取完，节点串联完
		                        if (hiTail != null) {
		                            //更新最后一位高位元素取完的下一位元素为0
		                            hiTail.next = null;
		                            //把高位首位元素放入数组
		                            newTab[j + oldCap] = hiHead;
		                        }
		                    }
		```

		



1,JAVA 强引用，软引用，弱引用，虚引用

1.1 强引用: 只有当对象没有被引用时，GC回收垃圾时开始回收此对象，否则不会被回收.

1.2 软引用: 只有当内存空间使用不足时，GC才会回收此对象,否则不会被回收.

1.3 弱引用: GC回收垃圾对象时，该对象就会被回收.

1.4 虚引用: 开辟在堆外的空间之内,任何时候都有可能被GC回收,在回收之前会被放入队列里面.

##3.代理

#### 3.1 静态代理



#### 3.2 动态代理

##### 3.2.1 JDK动态代理

1. JDK动态代理底层的实现原理是运行时产生一个Class,此Class继承Proxy 并且实现了 传递的给定接口，因此JDK的动态代理只能对接口实现动态代理，而不能对类进行代理
2. 此类有一个构造器，构造器的参数是InvocationHandler 并且此类有一个属性是InvocationHandler,此类还有四个静态属性，分别是Object的 equals,hashCode,toString 以及接口的实现方法Method.静态代码块会初始化这四个属性.此类有一个final方法为实现接口的重写方法.这个重写方法用InvocationHandler的属性值调用了invoke(this,method,args[]) 方法 ,其中this 是当前代理对象,method为接口的实现方法，args[]为重写方法的参数 .因此你可以再invoke里做任何操作。在调用代理对象的重写方法来达到调用目标对象重写方法的目的

```java  

public final class $Proxy0 extends Proxy implements Person
{
  private static Method m1;
  private static Method m2;
  private static Method m3;
  private static Method m0;
  
  /**
  *注意这里是生成代理类的构造方法，方法参数为InvocationHandler类型，看到这，是不是就有点明白
  *为何代理对象调用方法都是执行InvocationHandler中的invoke方法，而InvocationHandler又持有一个
  *被代理对象的实例，不禁会想难道是....？ 没错，就是你想的那样。
  *
  *super(paramInvocationHandler)，是调用父类Proxy的构造方法。
  *父类持有：protected InvocationHandler h;
  *Proxy构造方法：
  *    protected Proxy(InvocationHandler h) {
  *         Objects.requireNonNull(h);
  *         this.h = h;
  *     }
  *
  */
  public $Proxy0(InvocationHandler paramInvocationHandler)
    throws 
  {
    super(paramInvocationHandler);
  }
  
  //这个静态块本来是在最后的，我把它拿到前面来，方便描述
   static
  {
    try
    {
      //看看这儿静态块儿里面有什么，是不是找到了giveMoney方法。请记住giveMoney通过反射得到的名字m3，其他的先不管
      m1 = Class.forName("java.lang.Object").getMethod("equals", new Class[] { Class.forName("java.lang.Object") });
      m2 = Class.forName("java.lang.Object").getMethod("toString", new Class[0]);
      m3 = Class.forName("proxy.Person").getMethod("giveMoney", new Class[0]);
      m0 = Class.forName("java.lang.Object").getMethod("hashCode", new Class[0]);
      return;
    }
    catch (NoSuchMethodException localNoSuchMethodException)
    {
      throw new NoSuchMethodError(localNoSuchMethodException.getMessage());
    }
    catch (ClassNotFoundException localClassNotFoundException)
    {
      throw new NoClassDefFoundError(localClassNotFoundException.getMessage());
    }
  }
 
  /**
  * 
  *这里调用代理对象的giveMoney方法，直接就调用了InvocationHandler中的invoke方法，并把m3传了进去。
  *this.h.invoke(this, m3, null);这里简单，明了。
  *来，再想想，代理对象持有一个InvocationHandler对象，InvocationHandler对象持有一个被代理的对象，
  *再联系到InvacationHandler中的invoke方法。嗯，就是这样。
  */
  public final void giveMoney()
    throws 
  {
    try
    {
      this.h.invoke(this, m3, null);
      return;
    }
    catch (Error|RuntimeException localError)
    {
      throw localError;
    }
    catch (Throwable localThrowable)
    {
      throw new UndeclaredThrowableException(localThrowable);
    }
  }

  //注意，这里为了节省篇幅，省去了toString，hashCode、equals方法的内容。原理和giveMoney方法一毛一样。

}
```



3. 实现JDK动态代理的方法有两种

	```java  
	public class MyInvocationInteceptor implements InvocationHandler {
	    private MyInterface target;
	
	    public MyInvocationInteceptor(MyInterface myInterface) {
	        this.target = myInterface;
	    }
	
	    @Override
	    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
	        System.out.println("开始执行MyInvocationInceptor方法");
	        System.out.println("代理对象的类对象是"+proxy.getClass());
	        System.out.println("代理对象代理的方法名是"+method.getName());
	        System.out.println("开始执行dosomething方法");
	        Object result=method.invoke(target,args);
	        return result;
	    }
	}
	
	\\========================================================================
	    
	public class JdkDynamicProxyTest {
	    public static void main(String[] args) throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
	        InvocationHandler it=new MyInvocationInteceptor((o1,o2)->{
	            return "目标对象方法的返回值1";
	        });
	        Object proxyObject=Proxy.newProxyInstance(MyInterface.class.getClassLoader(),new Class[]{MyInterface.class},it);
	        MyInterface proxyObject1=(MyInterface)proxyObject;
	        String result=(String)proxyObject1.dosomething("1","a");
	        System.out.println(result);
	
	
	        Class<?> proxyClass=Proxy.getProxyClass(MyInterface.class.getClassLoader(),MyInterface.class);
	        Constructor<?> constructor=proxyClass.getConstructor(InvocationHandler.class);
	        MyInterface proxyObject2=(MyInterface) constructor.newInstance(new MyInvocationInteceptor((o1,o2)->{
	            return "目标对象方法的返回值2";
	        }));
	        String result1=(String) proxyObject2.dosomething("1","b");
	        System.out.println(result1);
	
	
	
	
	    }
	}
	\\==========================================================================
	    
	```

	3.2.1.1 源码分析
	
	
	
	```java 
	Class<?> cl = getProxyClass0(loader, intfs);
	//==================================================
	private static Class<?> getProxyClass0(ClassLoader loader,
	                                       Class<?>... interfaces) {
	    if (interfaces.length > 65535) {
	        throw new IllegalArgumentException("interface limit exceeded");
	    }
	
	    // If the proxy class defined by the given loader implementing
	    // the given interfaces exists, this will simply return the cached copy;
	    // otherwise, it will create the proxy class via the ProxyClassFactory
	    return proxyClassCache.get(loader, interfaces);
	}
	//======================================
	try {
	    value = Objects.requireNonNull(valueFactory.apply(key, parameter));
	} final
	    //=======================================
	
	    //核心代码块 生成代理类的字节码文件，并且加载到内存成为对应的Class对象
	    @Override
	    public Class<?> apply(ClassLoader loader, Class<?>[] interfaces) {
	
	    Map<Class<?>, Boolean> interfaceSet = new IdentityHashMap<>(interfaces.length);
	    for (Class<?> intf : interfaces) {
	        /*
	                 * Verify that the class loader resolves the name of this
	                 * interface to the same Class object.
	                 */
	        Class<?> interfaceClass = null;
	        try {
	            interfaceClass = Class.forName(intf.getName(), false, loader);
	        } catch (ClassNotFoundException e) {
	        }
	        if (interfaceClass != intf) {
	            throw new IllegalArgumentException(
	                intf + " is not visible from class loader");
	        }
	        /*
	                 * Verify that the Class object actually represents an
	                 * interface.
	                 */
	        if (!interfaceClass.isInterface()) {
	            throw new IllegalArgumentException(
	                interfaceClass.getName() + " is not an interface");
	        }
	        /*
	                 * Verify that this interface is not a duplicate.
	                 */
	        if (interfaceSet.put(interfaceClass, Boolean.TRUE) != null) {
	            throw new IllegalArgumentException(
	                "repeated interface: " + interfaceClass.getName());
	        }
	    }
	
	    String proxyPkg = null;     // package to define proxy class in
	    int accessFlags = Modifier.PUBLIC | Modifier.FINAL;
	
	    /*
	             * Record the package of a non-public proxy interface so that the
	             * proxy class will be defined in the same package.  Verify that
	             * all non-public proxy interfaces are in the same package.
	             */
	    for (Class<?> intf : interfaces) {
	        int flags = intf.getModifiers();
	        if (!Modifier.isPublic(flags)) {
	            accessFlags = Modifier.FINAL;
	            String name = intf.getName();
	            int n = name.lastIndexOf('.');
	            String pkg = ((n == -1) ? "" : name.substring(0, n + 1));
	            if (proxyPkg == null) {
	                proxyPkg = pkg;
	            } else if (!pkg.equals(proxyPkg)) {
	                throw new IllegalArgumentException(
	                    "non-public interfaces from different packages");
	            }
	        }
	    }
	
	    if (proxyPkg == null) {
	        // if no non-public proxy interfaces, use com.sun.proxy package
	        proxyPkg = ReflectUtil.PROXY_PACKAGE + ".";
	    }
	
	    /*
	             * Choose a name for the proxy class to generate.
	             */
	    long num = nextUniqueNumber.getAndIncrement();
	
	    //代理类的类名
	    String proxyName = proxyPkg + proxyClassNamePrefix + num;
	
	    /*
	             * Generate the specified proxy class.
	             */
	    byte[] proxyClassFile = ProxyGenerator.generateProxyClass(
	        proxyName, interfaces, accessFlags);
	    try {
	        return defineClass0(loader, proxyName,
	                            proxyClassFile, 0, proxyClassFile.length);
	    } catch (ClassFormatError e) {
	        /*
	                 * A ClassFormatError here means that (barring bugs in the
	                 * proxy class generation code) there was some other
	                 * invalid aspect of the arguments supplied to the proxy
	                 * class creation (such as virtual machine limitations
	                 * exceeded).
	                 */
	        throw new IllegalArgumentException(e.toString());
	    }
	}
	}
	```
	
	总结：jdk  Proxy.newProxyInstance 中创建出一个字节码对象，该对象继承Proxy类 并且有一个属性时用户设置的InvocationIntercepter对象.
	
	他的静态属性是Object的所有方法以及代理的目标方法，他的静态代码块会将这些方法对象反射成Method对象。他有所有和目标对象同名的方法。并且里面会调用this.invocationInterceptor.invoke(代理对象,参数,null)
	
	方法，就是进入invocationIntercepter的invoke方法。 invoke方法会实际调用目标对象的方法逻辑。
	
	
	
	

##### 3.2.2 ciglib动态代理

```java 
//创建增强器对象，里面预设了一系列缓存        
Enhancer enhancer=new Enhancer();
//设置目标类
enhancer.setSuperclass(AInterface.class);
//设置回调
enhancer.setCallback(interceptor);
//核心创建出实际代理对象
AInterface aInterface=(AInterface)enhancer.create();
aInterface.function1("aInterface");
```





##4.AQS源码分析

AQS-------->Sync------------>fairSync/noFairSync

1.首先lock()方法  调用sync 的lock()方法 sync默认实现是fairsysnc 可以指定为nofairsync

```java 
 public void lock() {
        sync.lock();
    }
//================================fairSync
     final void lock() {
            acquire(1);
        }
//================================noFairSync
 final void lock() {
            if (compareAndSetState(0, 1))
                setExclusiveOwnerThread(Thread.currentThread());
            else
                acquire(1);
        }

//=================================
```







2.公平锁，非公平锁都会进入 AQS的acquire方法

```JAVA 
//=============================== AQS的 acquire
   public final void acquire(int arg) {
        if (!tryAcquire(arg) &&
            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
            selfInterrupt();
    }

```



3.非公平锁 获取锁的过程不会考虑自己是否在队列以及是否要排队,但是在两次自旋获取失败之后，被加入队列之后，后续就和公平锁一样了。

```java 
   protected final boolean tryAcquire(int acquires) {
            return nonfairTryAcquire(acquires);
        }
//================================== 
final boolean nonfairTryAcquire(int acquires) {
            final Thread current = Thread.currentThread();
            int c = getState();
            if (c == 0) {
                if (compareAndSetState(0, acquires)) {
                    setExclusiveOwnerThread(current);
                    return true;
                }
            }
            else if (current == getExclusiveOwnerThread()) {
                int nextc = c + acquires;
                if (nextc < 0) // overflow
                    throw new Error("Maximum lock count exceeded");
                setState(nextc);
                return true;
            }
            return false;
        }
```



4.公平锁的tryAcquire方法

​    1.判断锁是否被占有，没占有的话判断是否处于竞争状态，有的话判断是否是重入

```java 
//============================ fairSync的tryAcquire方法========
protected final boolean tryAcquire(int acquires) {
            final Thread current = Thread.currentThread();
            int c = getState();
     //为0进入
            if (c == 0) {
                if (!hasQueuedPredecessors() &&
                    compareAndSetState(0, acquires)) {
                    setExclusiveOwnerThread(current);
                    return true;
                }
            }
    //如果之前持有锁，可以重入
            else if (current == getExclusiveOwnerThread()) {
                int nextc = c + acquires;
                if (nextc < 0)
                    throw new Error("Maximum lock count exceeded");
                setState(nextc);
                return true;
            }
            return false;
        }
    }


```

​     2.hasQueuedPredecessors()方法 判断锁是否处于竞争状态，竞争的话进入    acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) 否则直接取得锁。这里考虑的情况非常多。

  1.h==t 

1. 队列没有初始化----------------》没有竞争条件，直接尝试获得锁，不用考虑入队问题，获取锁失败，再考虑入队获得锁

2.  队列只有一个节点，头尾节点相同

	  2.1 队列刚刚被初始化，head=tail时此时队列只有一个初始化的空节点。此时若正好有线程进入，那么也可以直接获得锁。



 2.h!=t 

​    1.head.next=null

   队列中只有两个节点。-----------》队列中有且只有一个线程节点正在排队，那么此线程节点完全有资格尝试获得锁。

​    2.head.next!=null,head.next.thread=Thread.currentThread

 队列中有两个以上节点,并且此时队列排队节点的首位节点就是当前线程节点，那么此线程节点完全由资格舱室获得锁.

   3.head.next!=null,head.next.thread!=Thread.currentThread

 队列中有两个以上节点,并且此时队列排队节点的首位节点不是当前线程节点，那么当前线程节点只能去乖乖排队等待获取锁的资格

```java 
//=============================hasQueuedPredecessors方法====
  public final boolean hasQueuedPredecessors() {
        // The correctness of this depends on head being initialized
        // before tail and on head.next being accurate if the current
        // thread is first in queue.
        Node t = tail; // Read fields in reverse initialization order
        Node h = head;
        Node s;
        //h==t说明 队列未初始化head,tail都为null或者 head=tail刚刚初始化阶段
        return h != t &&
            ((s = h.next) == null || s.thread != Thread.currentThread());
    }
```



   3.addWaiter(Node.EXCLUSIVE), arg)方法

```JAVA  
   private Node addWaiter(Node mode) {
       //创建当前线程的节点Node
        Node node = new Node(Thread.currentThread(), mode);
       //获取当前AQS的tail节点，如果tail不为null说明队列已被初始化
       //如果tail不为Null则enq初始化AQS队列
        Node pred = tail;
        if (pred != null) {
            //当前线程的前指针指向队列的Tail节点
            node.prev = pred;
              //CAS设置当前队列的Tail节点为当前线程节点
            if (compareAndSetTail(pred, node)) {
                //设置上一个Tail节点的后指针指向当前线程节点
                pred.next = node;
                return node;
            }
        }
       //初始化AQS队列,初始化完成之后放入队列
        enq(node);
        return node;
    }
//=========================enq初始化AQS方法=============
   private Node enq(final Node node) {
        for (;;) {
            Node t = tail;
            if (t == null) { // Must initialize
                //CAS初始化队列的Head  Tail 节点
                if (compareAndSetHead(new Node()))
                    tail = head;
            } 
 //初始化队列之后，将当前线程的节点，放入队列的第二个元素，第一个元素的Thread永远为null
            else {
                //当前线程的前指针指向队列的Tail节点
                node.prev = t;
                //CAS设置当前队列的Tail节点为当前线程节点
                if (compareAndSetTail(t, node)) {
                    //设置上一个Tail节点的后指针指向当前线程节点
                    t.next = node;
                    return t;
                }
            }
        }
    }
```

 

4.在放入队列成功之后 调用acquiredQueue方法

```java 
final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                //获取当前线程的前节点
                final Node p = node.predecessor();
                //如果当前线程的前节点是Head的话，
                //且能获取锁 ，那么清除当前线程节点的线程。设置为Head节点，断开前Head的指向
                //方便GC回收前Head节点对象
                //此处是第一次开始自旋尝试获取锁的过程
                //如果shouldParkAfterFailedAcquire返回false的话即:前置节点的waitstatus已被置为-1，会开始第二次自选尝试获得锁
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                //传入当前线程节点的前一节点以及当前线程节点
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
```

5.如果放入队列成功，并且第一次自旋获取锁失败的话，进入shouldParkAfterFailedAcquire（）方法,

1. 此方法中会判断线程节点的waitstatus.第一次进入必定不为-1，因此就会将当前线程节点的前置节点的waitstatus设为-1.开始第二次自旋获得锁的过程。

2. 第二次自旋仍然没有获得锁之后，那么shouldParkAfterFailedAcquire会返回true,进入后面的parkAndCheckInterrupt()方法

```java 
  private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
      //Node节点初始化时它的waitStatus为0
      //当进入的线程节点第一次自旋设置完前置节点的waitstatus之后，再次进入的话会返回true
      int ws = pred.waitStatus;
       //线程节点第一次进入的话waitstatus为0，必定不满足
        if (ws == Node.SIGNAL)
            /*
             * This node has already set status asking a release
             * to signal it, so it can safely park.
             */
            return true;
        if (ws > 0) {
            /*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */
            do {
                node.prev = pred = pred.prev;
            } while (pred.waitStatus > 0);
            pred.next = node;
             //线程节点第一次进入的话waitstatus为0，必定不满足，进入此代码 
        } else {
            /*
             * waitStatus must be 0 or PROPAGATE.  Indicate that we
             * need a signal, but don't park yet.  Caller will need to
             * retry to make sure it cannot acquire before parking.
             */
            //设置当前线程节点的前置节点的waitstatus为-1
            compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
        }
        return false;
    }
```



6. 第二次自旋仍然没有获得锁之后 parkAndCheckInterrupt（）方法

	```java 
	  private final boolean parkAndCheckInterrupt() {
	      //让进入此方法当前线程进入睡眠状态
	        LockSupport.park(this);
	      //恢复线程中断的标志位
	        return Thread.interrupted();
	    }
	
	```

	





7. unlock()方法

	 1. tryrelease方法会会释放锁，直到将state减至0
	
	2. 当锁状态被清空至0后，会将当前线程节点的waitstatus恢复至0，并且unpark队列的下一线程节点

	```java 
	    public void unlock() {
	        sync.release(1);
	    }
	//======================================
	 public final boolean release(int arg) {
	     //如果成功释放锁的话，后续唤醒队列中的线程，并且还原当前线程节点的waitstatus
	        if (tryRelease(arg)) {
	            Node h = head;
	            if (h != null && h.waitStatus != 0)
	                //unpark方法唤醒队列中正在等待的线程节点
	                unparkSuccessor(h);
	            return true;
	        }
	        return false;
	    }
	//=================================
	     protected final boolean tryRelease(int releases) {
	         //当前state 减1
	            int c = getState() - releases;
	         //如果当前线程不是持有锁的线程抛出异常
	            if (Thread.currentThread() != getExclusiveOwnerThread())
	                throw new IllegalMonitorStateException();
	            boolean free = false;
	         //如果state已经置为0，代表可重入次数state置为了0
	            if (c == 0) {
	                free = true;
	                setExclusiveOwnerThread(null);
	            }
	         //重新设置state值
	            setState(c);
	            return free;
	        }
	//===================================================================
	 private void unparkSuccessor(Node node) {
	        /*
	         * If status is negative (i.e., possibly needing signal) try
	         * to clear in anticipation of signalling.  It is OK if this
	         * fails or if status is changed by waiting thread.
	         */
	        int ws = node.waitStatus;
	        if (ws < 0)
	            compareAndSetWaitStatus(node, ws, 0);
	
	        /*
	         * Thread to unpark is held in successor, which is normally
	         * just the next node.  But if cancelled or apparently null,
	         * traverse backwards from tail to find the actual
	         * non-cancelled successor.
	         */
	        Node s = node.next;
	        if (s == null || s.waitStatus > 0) {
	            s = null;
	            for (Node t = tail; t != null && t != node; t = t.prev)
	                if (t.waitStatus <= 0)
	                    s = t;
	        }
	    if (s != null)
	            //如果队列中有下一节点的话，唤醒下一个线程
	            LockSupport.unpark(s.thread);
	    }
	```


​	







## 5.ThreadLocal源码

1.new ThreadLocal()

2.threadLocal.set(Object)方法

判断currentThread.threadLocalMap 是否为null 如果为Null初始化一个，如果不为null直接set

```java 
   public void set(T value) {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null)
            map.set(this, value);
        else
            createMap(t, value);
    }
```



3.初始化ThreadLocal方法,并且放入元素

```java 
void createMap(Thread t, T firstValue) {
    t.threadLocals = new ThreadLocalMap(this, firstValue);
}
//============================================================
//初始化entry数组
table = new Entry[INITIAL_CAPACITY];
//计算当前ThreadlOCAL对象的hashCode值 注意这里的entry为weakReference
int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);
//给Hash表填充元素
table[i] = new Entry(firstKey, firstValue);
size = 1;
setThreshold(INITIAL_CAPACITY);
```

4.给已有的ThreadLocalMap赋值

```java 
private void set(ThreadLocal<?> key, Object value) {
    // We don't use a fast path as with get() because it is at
    // least as common to use set() to create new entries as
    // it is to replace existing ones, in which case, a fast
    // path would fail more often than not.

    Entry[] tab = table;
    int len = tab.length;
    //计算当前ThreadlOCAL对象的hashCode值
    int i = key.threadLocalHashCode & (len-1);

    //如果当前hash表有值，则取下一个，不断循环，直至位置为null
    for (Entry e = tab[i];
         e != null;
         e = tab[i = nextIndex(i, len)]) {
        ThreadLocal<?> k = e.get();
        //如果hash冲突数组当中刚好key一样，新值替换旧值
        if (k == key) {
            e.value = value;
            return;
        }
        //如果hash不冲突 设置值 ，涉及到垃圾回收
        if (k == null) {
            replaceStaleEntry(key, value, i);
            return;
        }
    }
    //如果key不一样发生hash冲突
    tab[i] = new Entry(key, value);
    int sz = ++size;
    //如果数组已满，扩容成新数组
    if (!cleanSomeSlots(i, sz) && sz >= threshold)
        rehash();
}
```

5.entry[]数组的扩容

```java 
   private void rehash() {
            expungeStaleEntries();

            // Use lower threshold for doubling to avoid hysteresis
       //用到数组容量的0.75倍时扩容
            if (size >= threshold - threshold / 4)
                resize();
        }
//====================================================================
 private void resize() {
            Entry[] oldTab = table;
            int oldLen = oldTab.length;
            int newLen = oldLen * 2;
            Entry[] newTab = new Entry[newLen];
            int count = 0;

            for (int j = 0; j < oldLen; ++j) {
                Entry e = oldTab[j];
                if (e != null) {
                    ThreadLocal<?> k = e.get();
                    if (k == null) {
                        e.value = null; // Help the GC
                    } else {
                        int h = k.threadLocalHashCode & (newLen - 1);
                        while (newTab[h] != null)
                            h = nextIndex(h, newLen);
                        newTab[h] = e;
                        count++;
                    }
                }
            }

            setThreshold(newLen);
            size = count;
            table = newTab;
        }

```

  6.get()方法  直接返回当前线程 threadLocalMap的 entry对象,不存在自动初始化

```java 
 public T get() {
        Thread t = Thread.currentThread();
        ThreadLocalMap map = getMap(t);
        if (map != null) {
            ThreadLocalMap.Entry e = map.getEntry(this);
            if (e != null) {
                @SuppressWarnings("unchecked")
                T result = (T)e.value;
                return result;
            }
        }
        return setInitialValue();
    }
```





## 6.JAVA System.getEnv System.getProperties  System.getProperty的区别

1. 如果配置属性才能让System.getProperty(String)获取到?
	使用java -D 配置系统属性.使用格式是:java -Dkey=value,如果value中有空格,则需要用双引号将该值括起来，如：-Dname="kazaf f"

2. Systm.getenv()和System.getProperties()有何区别呢?
	System.getenv()是获取系统环境变量，System.getProperties()是获取当前系统相关属性信息。 
	System.getenv():返回当前系统环境的字符串Map,其是不可变的,环境变量是系统相关的键值对,从父进程传递到子进程.如:JAVA_HOME,PATH等 
	System.getProperties():获取系统相关属性，比如：Java版本、操作系统信息、用户名等，这些跟JVM和操作系统相关的属性.如:java.version,os.name,user.dir,file.separator等


