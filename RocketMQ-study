## 1.RocketMQ-namesrv

1.初始化controller,里面初始化  namesrvserver,nettyserver ，之后启动controller 对外接收Client的请求

```java 
//初始化namesrcController  这是个nettyserver  接收nettyclient的请求
NamesrvController controller = createNamesrvController(args);
//启动controller,initalize controller
start(controller);
\\=========================================================
      //创建namesrv,nettyserverconfig 对象
        final NamesrvConfig namesrvConfig = new NamesrvConfig();
        final NettyServerConfig nettyServerConfig = new NettyServerConfig();
        nettyServerConfig.setListenPort(9876);
        //如果main方法参数 -c 指定了配置文件，使用配置文件的配置
\\================================================
      boolean initResult = controller.initialize();
        if (!initResult) {
            controller.shutdown();
            System.exit(-3);
        }

        Runtime.getRuntime().addShutdownHook(new ShutdownHookThread(log, new Callable<Void>() {
            @Override
            public Void call() throws Exception {
                controller.shutdown();
                return null;
            }
        }));
       //controller start方法启动namesrv
        controller.start();
\\==================================================================
    
```





## 2.RocketMQ-broker

### 1.broker 消息存储机制

#### 1.存储目录文件组成

1. commitlog 物理文件 存储的真正的消息数据 最大1G

	##### commitlog读取的优势

	 jdk 的MappedByteBuffer  内核的mmap函数。去除用户态到内核态数据的复制过程。 所以大大提高了读写文件的效率.

2. consumeQueue 逻辑消费队列，相当于commitLog的索引，方便快速定位分区，查找消息 单个文件最大5.73M

	##### consumeQueue存储的优势 consumeQueue预先存储5.8M的数据，采用顺序读写的机制。搭配内核的页缓存。使得读写consumeQueue的效率接近读取内存.

	

3. IndexFile 提供了key 或者时间戳来查询消息的方法 底层数据结构是hash表

总结：只要消息被写入commitlog,那么消费这就有机会读取消息。



### 2.持久化机制

#### 1.同步刷盘

 一旦broker接收到消息，立即向OS发出PageCache刷入磁盘的请求，只有在消息真正持久化至磁盘后RocketMQ的Broker端才会真正返回给Producer端一个成功的ACK响应。同步刷盘对MQ消息可靠性来说是一种不错的保障，但是性能上会有较大影响，一般适用于金融业务应用该模式较多。 



####2.异步刷盘

 能够充分利用OS的PageCache的优势，只要消息写入PageCache即可将成功的ACK返回给Producer端。消息刷盘采用后台异步线程提交的方式进行，降低了读写延迟，提高了MQ的性能和吞吐量。 











###Broker源码流程



1.初始化controller  ,里面初始化 nettyServer,nettyClient ,之后启动controller ，里面启动nettyserver

```java 
 //创建并且启动controller
        start(createBrokerController(args));
\\============================================================================
      if (this.messageStore != null) {
            this.messageStore.start();
        }

        if (this.remotingServer != null) {
            this.remotingServer.start();
        }

        if (this.fastRemotingServer != null) {
            this.fastRemotingServer.start();
        }

        if (this.fileWatchService != null) {
            this.fileWatchService.start();
        }

        if (this.brokerOuterAPI != null) {
            this.brokerOuterAPI.start();
        }

        if (this.pullRequestHoldService != null) {
            this.pullRequestHoldService.start();
        }

        if (this.clientHousekeepingService != null) {
            this.clientHousekeepingService.start();
        }

        if (this.filterServerManager != null) {
            this.filterServerManager.start();
        }

        if (!messageStoreConfig.isEnableDLegerCommitLog()) {
            startProcessorByHa(messageStoreConfig.getBrokerRole());
            handleSlaveSynchronize(messageStoreConfig.getBrokerRole());
            this.registerBrokerAll(true, false, true);
        }

```





##3.RocketMQ-Consumer





###1.RocketMQ消费者源码流程

##### 1.初始化DefaultPushConsumer---->初始化了DefaultMQPushConsumerImpl

#####2. **defaultPullConsumer.start()--------->this.defaultMQPullConsumerImpl.start();(典型的装饰者模式)**

1. 进入switch(this.serviceState)选择结构，this.serviceState初始默认都是Createjust

2. this.checkConfig() 核查配置信息
3. this.this.copySubscription();复制订阅
4. 初始化连接工厂 mqClientFactory
5. 重新负载均衡 rehance
6. 获取消息 newPullApiWrapper
7. 判断是否由客户端维护偏移量，或者是服务端维护偏移量
8. 判断是顺序消费，还是并发消费消息 orderly  or concurrently
9. 向namesrv注册自身相关信息registerConsumer  如果成功service.state为running









### 2.PullRequest详解





### 3.Cosumer java-api

#### 1. 消费模式

1. 集群消费模式(默认) MQ 认为任意一条消息只需要被集群内的任意一个消费者处理即可。

	1. 同一条消息不会被重复消费

	2. 消费状态由broker维护

	3. 消息重投时，不能保证发送到同一台机器

		 consumer.setMessageModel(MessageModel.CLUSTERING);

2. 广播模式：MQ将消息推送给所有注册过的客户端，保证每个消费这至少消费一次

	1. 消费进度由consumer维护
	2. 每个消费者至少消费一次
	3. 消费失败的消息不会重投

​             consumer.setMessageModel(MessageModel.BROADCASTING);





注意：同一个JVM进程不能用两个同名的consumerGroup





### Consumer的负载均衡策略

#### 1.平均负载均衡策略(不指定默认的)

1. Queue数量等于消费者数量

	一个消费者组对应一个Queue

2. Queue数量大于消费者数量

	如果Queue是消费者的整数倍，那么每个消费者先取属于自己那一份的QUEUE 

	如果Queue不是消费者的整数倍，那么多出来的给排序靠前的消费者拿走，剩余的其余消费者平分。

	**所有消费者拿到的队列是连续的**

3. Queue数量小于消费者数量

	一个对应一个,多出来的消费者永远拿不到消息，除非之前的消费者下线，或者宕机。



#### 2.环形分配策略

1. Queue数量等于消费者数量 一个消费者组对应一个Queue

2. Queue数量大于消费者数量

	每个消费者依次拿一个Queue,多出来的再按排序 依次分发给消费者。 

	**所有消费者拿到的队列不是连续的**

3. Queue数量小于消费者数量

	一个对应一个,多出来的消费者永远拿不到消息，除非之前的消费者下线，或者宕机。



#### 3.机房分配策略

**broker的名字 要 【机房名】@brokerName**

1. 帅选出topic所在的机房
2. 消费者根据机房所在的Queue进行平均分配策略



#### 4.一致性Hash策略(Hash 环分配)

把所有消费者，Queue按照一致性hash 算法取值  消费者根据自身计算的hash值，访问离自己最近的Queue.



####5.用户自定义分配策略：用户自己定义分配策略









## 4.RocketMQ-Producer

### 1.普通消息producer

defaultMqProducerImpl.start();

1. 检查配置是否合法
2. 启动netty客户端，启动后向namesrv发送请求
3. 创建更新brokerTopic远端信息的定时任务
4. 向broker发送心跳的定时任务，同时清理无效broker





defaultMqProducerImpl.send(); 注意send方法提供了一堆重载方法

```java 
public SendResult send(Message msg, long timeout);
public SendResult send(Message msg, MessageQueue mq);
public SendResult send(Message msg, MessageQueue mq, long timeout);
public void send(Message msg, MessageQueue mq, SendCallback sendCallback);
public SendResult send(Message msg, MessageQueueSelector selector, Object arg);
```

timeout:发送的超时时间

sendCallback 异步发送消息的回调。同步没有

MessageQueue 封装了 发送指定的brokerName, brokerTopic,brokerTopicQueueId

MessageQueueSelector 队列选择器，如果没有该参数，那么 该选择器默认采用默认策略，选择一i个队列发送



**生产者的负载均衡策略**

1.随机递增取模 producer维护一个index  每次访问Index++  对brokerTopicQueueId的数量取余，进而找到指定的QueueId,  brokerName

 **sendLatencyFaultEnable**  的开关如果打开的话，那么如果上一次发送broker失败，会把本次发送的broker延长时间，从时间上规避发送到故障的broker上







### 2.生产模式

#### 1.同步发送

发送时阻塞，直至收到发送成功的响应



#### 2.异步发送

发送时，继续执行后续代码。后续通过回调机制收到发送的反馈.



#### 3.单向发送

只管发送，不管发送结果.





## 5.RocketMQ 集群

1. 集群配置

	**brokerClusterName：**同一个集群中，brokerClusterName需一致

	**brokerId：**0 表示 Master，>0 表示 Slave

	**namesrvAddr：**配置多个用分号分隔

	**brokerIP1**：默认系统自动识别，但是某些多网卡机器会存在识别错误的情况，建议都手工指定

	**brokerRole：**选择Broker的角色

	**flushDiskType：**选择刷盘方式

	**deleteWhen：** 过期文件真正删除时间

	**fileReservedTime：**Commitlog、ConsumeQueue文件，如果非当前写文件在一定时间间隔内没有再次被更新，则认为是过期文件，可以被删除，RocketMQ不会管这个这个文件上的消息是否被全部消费

**同一台机器 注意端口号，store存储的目录不能重复**



2. 主动同步的机制

	1. 同步同步数据

		Producer阻塞，直到消息复制到从机上，返回ack给Producer，才继续往下进行.高可靠性

	2. 异步同步数据

		Producer继续往下进行其他业务，主机等到积累了一定数据量将消息复制到从机上，返回ack给Producer。Producer通过回调机制确认.高性能.



3. 主从同步宕机的处理机制

旧版本不支持 master宕机 自动选举。

新版本通过DLedger 方式 进行半数选举 模式，并且Dledger 实行同步数据的半数ack机制，这样更加保证挣了消息主从的一致性



enableDLegerCommitLog = true
dLegerGroup = broker-a
dLegerPeers = n0-192.168.150.210:40911;n1-192.168.150.211:40911
dLegerSelfId = n0
sendMessageThreadPoolNums = 4





## 6.RocketMQ常见问题

### 1.rocketMQ消费消息的模式

1. （pull,push的区别）
2. cluster broast区别



### 2.rocketMQ如何做到负载均衡的？

1. 如何负载访问nameserver?
2. 如何负载访问broker?
3. 如何负载访问同一集群下不同broker的同一topic
4. 如何负载访问同一集群下同一broker的不同queue的？



### 3.如何防止消息丢失？

1. producer在发送消息的时候，如果ACK不是成功状态的话，进行消息的重投。直至broker返回给producer一个ACK的响应之后，才停止重试
2. broker设置刷盘为同步刷盘，就是收到消息，放入PageCache之后立即持久化到磁盘.



### 4.如何做到顺序消费？

1. 将需要顺序的消费发送至同一个 Queue中，所有消费只消费这个Queue的消息。

### 5.如何处理消息的堆积？



1. 如果consumer数量小于Queue数量，则新建消费者处理。
2. 如果consumer数量已经大于Queue数量，新建TOPIC 存储堆积的Topic的消息。上线消费者专门用于转移消息，不做业务处理。再新建消费者处理堆积的消息。
3. 如果consumer数量已经大于Queue数量，新建消费者 处理堆积消息的最后一条，依次往前处理。直至，新的消费者与旧的消费者，消费的偏移位重叠。

