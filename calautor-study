1,多线程下CPU 与内存的交互
为保持数据的一致性.Intel CPU采用两种方式保证多线程下操纵共享数据的一致性.
a,CPU总线锁 直接锁住总线。一次只能一个CPU与内存中的共享变量进行交互。效率极差.
b,缓存锁即缓存一致性原理。CPU缓存一次存入8个字节的数据。（局部性效率原理)  
当CPU1 访问共享变量时，共享变量复制到CPU1的缓存行中去 此时CPU1中的变量状态为E独占。
此时CPU2也需要访问共享变量，总线嗅探机制会将CPU1中变量的状态变为S共享。并且复制一份变量到CPU2的缓存中去。此时CPU2的变量状态也为S。
一旦CPU1修改变量。则CPU1的变量则会变为M，此时总线嗅探机制会将CPU2的变量状态变为I。并且此时CPU2无权将变量A写回到主内存当中去。
CPU1修改完变量。将自己的变量状态改为E并且写入到主内存当中去。总线嗅探机制会将CPU1的改动通知到CPU2。CPU2重新加载变量，之后将两个变量的状态修改为S。

