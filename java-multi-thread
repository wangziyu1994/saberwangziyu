java 线程
1,三种 创建方式

线程join方法 让执行此方法的线程对象优先执行，其他线程进入堵塞状态,并且yield方法并不让其他等待的线程得到此线程的执行权
线程wait方法  让线程进入等待状态，并且会释放锁。notify会唤醒被wait的线程，但是notify并不会释放锁对象.

2,如何同步:
2,1 volatile 
底层MESI缓存一致性原理,保证可见性,指令有序性.

2.2 CAS compare and swap 
保证原子性,可见性，指令有序性  
当改变共享变量时，与自己的预期值(上一次修改后的值)做比较,符合则修改。否则则更新预期值,继续循环比较.
AtomicInteger AtomicLong
LongAddr 当并发非常大时,分为数组，每个数组单独进行自选锁操作，最后SUM累加得值。
问题：可能产生ABA问题 加入版本号解决. new AtomicStampReference(变量值,版本号);
问题：并发大时CPU负载高。影响性能.


2.3 synchronized 代码块 方法
并发数小的时候CAS自选锁,并发大的时候重量级锁.

2.4 ReenTrantLock
可以完全替代synchronized
不同点: 可以设置公平锁,非公平锁
可以设置interrupt中断线程
可以设置tryLock(超时时间) 

2.5栅栏:
CountDownLatch CyclicBarrier  Phrase
2.6交换:
Exchanger

2.7 重量级锁/轻量级锁   公平锁/非公平锁   共享锁/排他锁


2.8 LockSupport LockSupport的 PARK方法暂停一个线程  UNPARK方法解除一个线程的暂停。 UNPARK方法一个先于PARK方法运行。比较灵活。


3,同步底层原理:AQS

3.1 ReenTrantLock有一个内部类Syn    lock();方法调用Syn的acquire(1)方法  Syn继承AbstractSynchronizedQueue  调用AbstractSynchronizedQueue
的acquire方法   acquire方法中有两个方法判断:a,!tryAcquire()方法 b,acquireQueued（）方法 a为false未获得锁, b为true表示不用进入队列

3.2 tryAcquire(args)方法:来自于Syn自身的重写方法 ----->根据实现类的不同，有公平性锁的方法以及非公平性锁的方法

3.2.1 getState()方法获取volatile 1说明有人持有  0说明锁无线程持有  state的值(继承自AbstractSynchronizedQueue)

3.2.2 state为0进入hasQueuedPredecessors(),非公平性锁没有此判断,根据队列判断是否有资格尝试获取锁，
详情见 https://blog.csdn.net/weixin_38106322/article/details/107154961
3.2.2.1 如果hasQueuedPredecessors()(非公平锁不用放入队列，直接竞争)返回false 继续compareAndSetState() 设置state=state+1原子性操作，线程安全

3.2.3 setExclusiveOwnerThread 设置exclusiveOwnerThread属性为当前线程

3.2.4 如果state!=0,继续判断exclusiveOwnerThread属性是否是当前线程. 如果是则继续，保证锁的重入性. 设置state=state+1.

3.3acquireQueued(addWaiter(Node.EXCLUSIVE), arg))方法



4,ThreadLocal 原理实现 https://www.cnblogs.com/dennyzhangdd/p/7978455.html
4.1 new ThreadLocal();------- threadLocalHashCode------->nextHashCode 方法 取得hashCode码值+1 CAS锁

4.2get()方法
4.2.1如果当前线程的ThreadLocalMap为null 则setInitialValue（）设定初始Value为null
再一次判断 当前线程的ThreadLocalMap 是否为null 如果是 createMap() new ThreadLocalMap(当前ThreadLocal对象,null);
4.2.2 进入ThreadLocalMap构造方法后，初始化一个容量为16的Entry数组，将Entry[ThreadLocal当前的hashCode%15]=new Entry(当前Threadlocal对象,null);

4.2.3如果当前线程的ThreadLocalMap不为null 则map.getEntry(当前ThreadLocal对象) 获取Entry[ThreadLocal当前的hashCode%15]
4.2.4如果 Entry[ThreadLocal当前的hashCode%15]不为null 且里面的ThreadLocal等于当前ThreadLocal对象，则返回，
否则getEntryAfterMiss(当前ThreadLocal对象, ThreadLocal当前的hashCode%15, Entry[ThreadLocal当前的hashCode%15]);
4.2.5遍历当前线程ThreadLocalMap的Entry数组 若果e.get()==当前ThreadLocal对象则返回，否则

4.3 set()方法
4.3.1判断当前线程的ThreadLocalMap 是否为null 如果是 createMap() new ThreadLocalMap(当前ThreadLocal对象,null);
4.3.2进入ThreadLocalMap构造方法后，初始化一个容量为16的Entry数组，将Entry[ThreadLocal当前的hashCode%15]=new Entry(当前Threadlocal对象,null);
4.3.4如果不为null

总结 每个Thread维护自己独立的ThreadLocalMap   每个线程第一次调用ThreadLocal对象get()方法 都会在在当前线程初始化一个ThreadLocalMap ThreadLocalMap<ThreadLocal,null>
每个线程第一次调用set()方法，也会在当前线程初始化一个ThreadLocalMap<ThreadLocal,Value> 注意ThreadLocal是弱引用.



5,JAVA关于多线程的容器
1,List
1.1 ArrayList 线程不安全
1.2 LinkedList 线程不安全
1.3 Vector 线程安全
1.4 ConcurrentQueueList 线程安全  poll()方法判断 是否还存在元素，不存在返回null
1.5 CopyAndWriteList 读不加锁，写加锁 写的时候复制数组 写完将底层数组复制到新数组中去

2,Map
2.1 HashMap 线程不安全
2.2 TreeMap 线程不安全 有序
2.3 HashTable 线程安全
2.4 Collecton.synchronizedMap() 线程安全
2.5 CocurrentMap 线程安全
2.6 ConcurrentSkipListMap()线程安全 有序 跳表结构 查找元素相对较快.


3,Queue
add()方法，容量满时报错  offer()方法,容量满时返回false  peek()方法,返回不移除被取走的元素.  poll()返回移除被取走的元素，不存在返回null

3.1 非阻塞队列
3.1.1 ConcurrentLinkedQueue 无界队列

3.2 阻塞队列
put()容量满时，会阻塞当前线程。直至有剩余容量。 take()无元素时，会阻塞当前线程,直至有新的元素被添加进来.
3.2.1 ArrayListBlockingQueue  LinkedListBlockingQueue
3.2.2 DelayQueue 会根据元素对象的getDelay()  compareTo方法 的顺序返回元素》
3.2.3 SynchronizedQueue  队列容量为0 put()方法会一直阻塞当前线程，直至有别的线程添加一个元素，才会释放当前线程.
3.2.4 TransferQueue  put()方法同上， transfer()方法 也会阻塞当前线程，直至次元素被别的线程拿走时，才会释放当前线程.





java线程池
使用 Executors中的静态方法即可创造thread pool 主要有以下三种：
方法名	功能
newFixedThreadPool(int nThreads)	
创建固定大小的线程池
创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待

newSingleThreadExecutor()	
创建只有一个线程的线程池


newCachedThreadPool()	
创建一个不限线程数上限的线程池，任何提交的任务都将立即执行
创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程
线程池为无限大，当执行第二个任务时第一个任务已经完成，会复用执行第一个任务的线程，而不用每次新建线程

小程序使用这些快捷方法没什么问题，对于服务端需要长期运行的程序，创建线程池应该直接使用ThreadPoolExecutor的构造方法.

  构造方法参数详解:
  
  int corePoolSize, // 线程池长期维持的线程数，即使线程处于Idle状态，也不会回收。
  int maximumPoolSize, // 线程数的上限
  long keepAliveTime, TimeUnit unit, // 超过corePoolSize的线程的idle时长，
                                     // 超过这个时间，多余的线程会被回收。
  BlockingQueue<Runnable> workQueue, // 任务的排队队列
  ThreadFactory threadFactory, // 新线程的产生方式
  RejectedExecutionHandler handler) // 拒绝策略

注意：
corePoolSize和maximumPoolSize设置不当会影响效率，甚至耗尽线程；
workQueue设置不当容易导致OOM；
handler设置不当会导致提交任务时抛出异常。

线程池的工作顺序：
corePoolSize -> 任务队列 -> maximumPoolSize -> 拒绝策略

线程池三种提交任务的方式：
提交方式	是否关心返回结果
Future<T> submit(Callable<T> task)	是
void execute(Runnable command)	否
Future<?> submit(Runnable task)	否，虽然返回Future，但是其get()方法总是返回null


线程池的拒绝策略

拒绝策略	拒绝行为
AbortPolicy	抛出RejectedExecutionException
DiscardPolicy	什么也不做，直接忽略
DiscardOldestPolicy	丢弃执行队列中最老的任务，尝试为当前提交的任务腾出位置
CallerRunsPolicy	直接由提交任务者执行这个任务


// Java线程池的完整构造函数
public ThreadPoolExecutor(
  int corePoolSize, // 正式工数量
  int maximumPoolSize, // 工人数量上限，包括正式工和临时工
  long keepAliveTime, TimeUnit unit, // 临时工游手好闲的最长时间，超过这个时间将被解雇
  BlockingQueue<Runnable> workQueue, // 排期队列
  ThreadFactory threadFactory, // 招人渠道
  RejectedExecutionHandler handler) // 拒单方式



