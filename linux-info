## 1.linux开关机
关机命令:
a,shutdown -h  + [关机时间] 正常关机
b,halt 关闭内存
c,init 0
linux查看CPU占用率最高的线程===============================================
top 命令  shift+p 过滤出占用率最高的进程
top -H -p  pid 过滤出此线程中占用率最高的线程
jstack [进程号] 可以将相关进程的信息打印出来



## 2.linux 安装软件

1.yum redhad/suse 的shell 软件包管理器

yum install [] 安装

yum remove []移除

yum  search [] 搜索




#:root 系统超级管理员
$:普通用户

==========================vi/vim模式==========================
vim -R 只读模式
底层命令模式 :set nu   :wq  :q!   /[pattern]   ?[pattern]  n1,n2s/old words/new words/g   n1,n2之间全行替换  全局替换1,$
                 :! [command] 暂时离开vim模式 执行输入的命令    :w [文件] 另存为另外一个文件  :r[文件] 导入另一个文件查看
命令模式: yy复制一行  dd删除一行  x删除一个字符   p粘贴   u撤销一次操作   ctrl+r 恢复上次撤销    . 重复上次动作
编辑模式: 插入模式:i/o/a  替换模式:r


===========================crontab基本任务模式================
*  *   *   *  *   分 时 日 月 星期 command

* 通配符
a-b a和b之间
a,b,c,d a或b或c或d
a/b 表示在a范围内 跳过b

============================ftp=================================
linux 文件换行符 /r/n
window 文件换行符 /n
binary模式 不改变文件的任何内容
ascii模式  识别不同的操作系统的换行模式 自动替换换行符。

==================================================================
echo -e 开启转义
echo -n 读取键盘输入
echo 

===============================
linux 中的局部变量、全局变量、shell 变量的总结
系统局部变量和全局变量
 一、变量分类
局部变量和环境变量，局部变量只适用于当前shell，而环境变量是全局的，它适用于所有当前shell以及其派生出来的任意子进程，有些变量是用户创建的，其他的则是专用的shell变量。
二、局部变量
局部变量的作用域被限定在创建它们的shell中。local函数可以用来创建局部变量，但仅限于函数内使用。局部变量可以通过简单的赋予它一个值或一个变量名来设置，用declare内置函数来设置，或者省略也可。
格式：
变量名=值
declare 变量名=值
以下来示范一个局部变量的例子：
[root@centos ~]# echo $$
8836
[root@centos ~]# round=world
[root@centos ~]# echo $round
world
[root@centos ~]# bash
[root@centos ~]# echo $$
8920
[root@centos ~]# echo $round
[root@centos ~]# exit
exit
[root@centos ~]# echo $$
8836
[root@centos ~]# echo $round
world
在上面的岩石中可以看出，当启动一个bash程序，相当于创建一个子shell后，round变在这个子shell中没有被赋值，exit退出子shell后，可以看到父shell中变量round仍有值。
三、环境变量
环境变量通常又称全局变量，以区别于局部变量，通常，环境变量应该大写，环境变量是已经用export内置命令导出的变量。子shell继承当前父shell的环境变量，并能一直传承下去，但是不可逆向传递。
格式：
export 变量=值
declare -x 变量=值
我们做个示范：
[root@centos ~]# export NAME=”yuan faxiang”
[root@centos ~]# echo $NAME
yuan faxiang
[root@centos ~]# echo $$
8836
[root@centos ~]# bash
[root@centos ~]# echo $$
8958
[root@centos ~]# echo $NAME
yuan faxiang
[root@centos ~]# declare -x NAME=”Arvin”
[root@centos ~]# echo $NAME
Arvin
[root@centos ~]# exit
exit
[root@centos ~]# echo $$
8836
[root@centos ~]# echo $NAME
yuan faxiang
上述例子中，父shell中定义的NAME环境变量传递到了子shell中，在子shell中定义的NAME环境变量没有被带到父shell中。
环境变量按生存周期可分为：
1. 永久的：需要修改配置文件，export变量永久生效。
2. 临时的：使用export命令行声明即可，变量在关闭shell时失效。
2.设置变量的三种方法
1) 在/etc/profile文件中添加变量【对所有用户生效(永久的)】
用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。
例如：编辑/etc/profile文件，添加CLASSPATH变量
# vi /etc/profile
export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。
2) 在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】
用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。
例如：编辑guok用户目录(/home/guok)下的.bash_profile
$ vi /home/guok/.bash.profile
添加如下内容：
export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib
注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。
3) 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】
在shell的命令行下直接使用[export变量名=变量值]定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。

===========================linux 防火墙 端口设置================
1、firewall-cmd --zone=public --add-port=80/tcp --permanent  永久增加开放端口

2、firewall-cmd  --reload 重启防火墙

3、 firewall-cmd --list-port 查看所有开放端口
===========================linux sort命令======================================================
sort 
-b 忽略每行前面开始出的空格字符。
-c 检查文件是否已经按照顺序排序。
-d 排序时，处理英文字母、数字及空格字符外，忽略其他的字符。
-f 排序时，将小写字母视为大写字母。
-i 排序时，除了040至176之间的ASCII字符外，忽略其他的字符。
-m 将几个排序好的文件进行合并。
-M 将前面3个字母依照月份的缩写进行排序。
-n 依照数值的大小排序。
-o<输出文件> 将排序后的结果存入指定的文件。
-r 以相反的顺序来排序。
-t<分隔字符> 指定排序时所用的栏位分隔字符。
+<起始栏位>-<结束栏位> 以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。
--help 显示帮助。
--version 显示版本信息。
===========================linux  uniq命令=====================================================================
-c或--count 在每列旁边显示该行重复出现的次数。
-d或--repeated 仅显示重复出现的行列。
-f<栏位>或--skip-fields=<栏位> 忽略比较指定的栏位。
-s<字符位置>或--skip-chars=<字符位置> 忽略比较指定的字符。
-u或--unique 仅显示出一次的行列。
-w<字符位置>或--check-chars=<字符位置> 指定要比较的字符。
--help 显示帮助。
--version 显示版本信息。
[输入文件] 指定已排序好的文本文件。
[输出文件] 指定输出的文件
==========================linux 查找文件命令====================================================================
1,which:在 PATH 变量中定义的全部路径中查找可执行文件或脚本。
1.1 -a  搜索全路径 1.2 -i 搜索别名

2,whereis:查找指定命令的可执行文件、源代码和手册的位置。
1.1 -b -s -m 1.2 -B -M -S用于指定路径  1.3 -u 查找多份对应的记录

3,locate:在文档和目录名称的数据库中查找指定文件,Linux 系统会定期自动扫描磁盘来维护一个记录磁盘数据的数据库.
新文件可能会未被扫描到数据库.需要使用updatedbG更新locate的数据库
3.1 -c查询数量  -i忽略大小写  -r使用正则表达式 
3.2-l/-n限制查找的数量

4,find:在一个目录层级中查找文件。
find [path...] [expression]
-size +100M 查找大于100M的文件
-atime  -7 查找过去7天访问的文件
-ctime +90 查找90天之前创建的文件
-name 查找指定名称的文件





























