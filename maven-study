1.mvn help:effective-pom  显示super-pom.xml 配置
2.mvn package -DskipTests     不执行test下的测试用例但生成相应test.class
3.mvn package -Dmaven.test.skip=true  不执行test下的测试用例也不生成相应test.class
4.maven项目中pom.xml正确 但无maven dependcies libraries
设置项目.classpath文件 添加
<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
5.

6.dependcy scope作用：
分类说明
compile
默认scope为compile，表示为当前依赖参与项目的编译、测试和运行阶段，属于强依赖。打包之时，会达到包里去。
test
该依赖仅仅参与测试相关的内容，包括测试用例的编译和执行，比如定性的Junit。
runtime
依赖仅参与运行周期中的使用。一般这种类库都是接口与实现相分离的类库，比如JDBC类库，在编译之时仅依赖相关的接口，在具体的运行之时，才需要具体的mysql、oracle等等数据的驱动程序。
此类的驱动都是为runtime的类库。
provided
该依赖在打包过程中，不需要打进去，这个由运行的环境来提供，比如tomcat或者基础类库等等，事实上，该依赖可以参与编译、测试和运行等周期，与compile等同。区别在于打包阶段进行了exclude操作。
system
使用上与provided相同，不同之处在于该依赖不从maven仓库中提取，而是从本地文件系统中提取，其会参照systemPath的属性进行提取依赖。
import
这个是maven2.0.9版本后出的属性，import只能在dependencyManagement的中使用，能解决maven单继承问题，import依赖关系实际上并不参与限制依赖关系的传递性。

7.dependcyManagment jar包依赖管理 如果父类项目在managment 里写了版本 那么子类则继承父类 无需再写，如果子类写了，则实际引用版本以子类为准.
