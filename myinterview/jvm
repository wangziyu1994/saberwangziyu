##### 1.说一下 JVM 的主要组成部分及其作用？

（只是运行时数据区域）

1. 堆内存  JVM存储对象的区域
2. 栈内存  方法运行时，开辟的内存区域。
3. 堆外内存 直接使用系统管理的内存
4. 方法区 存放类CLass文件信息，
5. native 区  本地native方法 运行的内存区域

=========================================

1. ClassLoader 类加载系统：加载本地Class文件到运行时数据区域的方法区内
2. 执行引擎  调用本地native接口 把Class文件翻译成机器指令交给CPU执行
3. 运行时数据区域 存放Class文件信息内存区域
4. 本地native接口 将Class文件编译成机器指令



##### 2.说一下 JVM 运行时数据区

1. 堆内存  JVM存储运行时产生对象的区域
2. 栈内存  方法运行时，开辟的内存区域。
	1. 操作数栈 : 压入变量，弹出变量
	2. 本地变量表 ：存储方法定义的变量的值
3. 堆外内存 直接使用系统管理的内存
4. 方法区 存放类CLass文件信息，类的静态变量，常量都存贮在此区域
5. native栈 区  本地native方法 运行的内存区域
6. 程序计数器  定位执行字节码指令的位置，控制字节码指令的执行流程



##### 3.深拷贝和浅拷贝

1. 浅拷贝

	1.直接把对象的引用地址 传给另一个对象。

	2.实际并没有赋值一个新对象，对此对象值的改变，会影响到原对象

2. 深拷贝

	1. 直接开辟一个新的内存区域，新对象的属性值，方法与原对象一样，

		对新对象的改变不会影响到原对象.



#####4.说一下堆栈的区别？

1. 堆:JVM堆内存，对象的存储区域
2. 栈:方法运行时，开辟的内存区域

==============================

内存区别：

 堆内存不连续，只能运行时确定。大小远大于栈

  栈内存连续，只能编译期间指定。



存储的数据不同：

堆内存存储 运行时的对象，jdk1.8之后是方法区也放在栈

栈内存存储局部变量，操作数栈



可见度不同：

堆被所有线程所共享

栈每个线程都有自己独立的栈空间，他的生命周期和线程一致。线程执行完，销毁线程栈。



##### 5.队列和栈是什么？有什么区别

队列：先进先出的数据结构  队首入队 队尾出队

栈：先进后出的数据结构 只能压栈 只能对栈顶进行操作



#####6. 说到对象的创建，首先让我们看看 Java 中提供的几种对象创建方式：

1.new ()

2.constructor.new Instance()

3.object.clone

====================================

4.class.new Instance()

注意 constuctor.new Instance() 就可以无参，也可以有参，设置权限 可以调用私有

​         class.new Instance()  只可以默认无参 ，不能调用私有