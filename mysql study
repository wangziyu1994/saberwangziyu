===========================================MYSQL设置新密码=======================================================================
1，mysqld --console --skip-grant-tables --shared-memory //开启无密码登录MYSQL服务模式,
2，update user set authentication_string='' where user='root';
3，ALTER USER 'root'@'localhost' IDENTIFIED BY '新密码'; //5.7.5以后
4，set password for root@localhost=password('');//5.7.5以前
============================================MYSQL navicate not support authorication======================================================================
ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'newpassword';



============================================MYSQL不同引擎数据库文件存储======================================================================
了解MYSQL的都知道，在MYSQL中建立任何一张数据表，在其数据目录对应的数据库目录下都有对应表的.frm文件,.frm文件是用来保存每个数据表的元数据(meta)信息，包括表结构的定义等，.frm文件跟数据库存储引擎无关，也就是任何存储引擎的数据表都必须有.frm文件，命名方式为数据表名.frm，如user.frm. .frm文件可以用来在数据库崩溃时恢复表结构。

MySQL文件包括MySQL所建数据库文件和MySQL所用引擎创建的数据库文件。

.frm 文件与操作系统和数据库引擎无关，都有这么个与表名同名文件。

MyISAM引擎的文件：

.myd 即 my data，表数据文件

.myi 即my index，索引文件

.log 日志文件。

InnoDB引擎的文件：

采用表空间（tablespace）来管理数据，存储表数据和索引，

InnoDB数据库文件（即InnoDB文件集，ib-file set）：

ibdata1、ibdata2等：系统表空间文件，存储InnoDB系统信息和用户数据库表数据和索引，所有表共用。

.ibd文件：单表表空间文件，每个表使用一个表空间文件（file per table），存放用户数据库表数据和索引。

日志文件： ib_logfile1、ib_logfile2

################################################################################################################################################################

Innodb存储引擎管理主要基于两个文件：表空间数据文件和日志文件。

InnoDB存储它的表＆索引在一个表空间中，表空间可以包含数个文件（或原始磁盘分区）。

如果没有指定InnoDB配置选项，MySQL将在MySQL数据目录下创建一个名为ibdata1的10MB大小的自动扩展数据文件，以及两个名为ib_logfile0和ib_logfile 1的5MB大小的日志文件。

ibdata1的大小在my.cnf文件中配置：innodb_data_file_path = ibdata1:10G:autoextend

可以设置最大数据文件限制，以免超过系统支持的最大文件：

innodb_data_file_path = ibdata1:100M:autoextend:max:500M

日志文件大小在my.cnf文件中配置：innodb_log_file_size  = 256M  innodb_log_files_in_group = 2

Innodb存储引擎可以使用共享表空间或独立表空间，使用独立表空间时，需要将innodb_file_per_table加到配置文件中，也可以在variables中开启。

共享表空间是将所有的表的数据和索引保存在ibdata1中，这样的缺点是拷贝时必须拷贝整个大文件，而且删除表后容易产生碎片。

独立表空间是为每个表建立一个.ibd文件用来存储数据和.frm用来存数据词典信息，这样，mysql就将innodb表的数据存入各自对应的.ibd文件中了，但结构等信息还是会写入ibdata。

innodb_file_per_table变量只能在配置文件里修改，不能使用set global ...

将innodb_file_per_table关闭之后，建立innoDB表时只生成.frm文件，数据和索引都保存在共享表空间ibdata1中。################################################################################################################################################################

MySQL数据库存放位置：

1、MySQL如果使用MyISAM存储引擎，数据库文件类型就包括.frm、.MYD、.MYI，默认存放位置是C:\Documentsand Settings\All Users\Application Data\MySQL\MySQL Server 5.1\data

2、MySQL如果使用InnoDB存储引擎，数据库文件类型就包括.frm、ibdata1、.ibd，存放位置有两个，

.frm文件默认存放位置是C:\Documents and Settings\All Users\ApplicationData\MySQL\MySQL Server 5.1\data，ibdata1、.ibd文件默认存放位置是MySQL安装目录下的data文件夹
========================================================MYSQL导出数据文件命令==========================================================

1. 用 SELECT…INTO OUTFILE 导出文本文件
 在 MySQL 数据库中导出数据时，允许使用包含导出定义的 SELECT 语句进行数据的导出操作。
 该文件在服务器主机上创建，因此必须拥有文件写入权限 (FILE权限)，
 才能使用此语法。“SELECT...INTO OUTFILE 'filename' " 形式的 SELECT语句可以把被选择的行写入一个文件中，filename 不能是一个已经存在的文件。
 SELECT...INTO OUTFILE 语句的基本格式如下:

SELECT columnlist FROM table WHERE condition  INTO OUTFILE 'filename' [OPTION]

--OPTIONS 选项
　　FIELDS TERMINATED BY 'value'
　　FIELDS [OPTIONALLY]  ENCLOSED BY 'value' 
　　FIELDS ESCAPED BY 'value' 
　　LINES STARTING BY 'value'  
　　LINES TERMINATED BY 'value'  
SELECT columnlist FROM table WHERE condition 为查询语句，查询结果返回满足指定条件的一条或多条记录；
INTO OUTFLE 语句的作用就是把 SELECT 语句查询出来的结果导出到名称为 filename 的外部文件中，
[OPTIONS] 为可选参数选项，OPTIONS 部分的语法包括 FIELDS 和 LINES 子句。

  FIELDS TERMINATED BY  'value' 设置字段之间的分隔符可以为单个或多个字符，默认情况下为制表符“\t”。
 FIELDS [OPTIONALLY] ENCLOSED BY 'value' 设置字段的包围字符，只能为单个字符，如果使用了OPTIONALLY 
 则只包括 CHAR 和 VARCHAR 等字符数据字段。
FIELDS ESCAPED BY 'value' 设置如何写入或读取特殊字符，只能为单个字符，即设置转义字符，默认值为“\”。
LINES STARTING BY 'value'  设置每行数据开头的字符，可以为单个或多个字符，默认情况下不使用任何字符。
LINES TERMINATED BY 'value' 设置每行数据结尾的字符，可以为单个或多个字符，默认值为“\n”。
FIELDS 和 LINES 两个子句都是自选的，但是如果两个都被指定了，FIELDS 必须位于 LINES 的前面。

SELECT...INTO OUTFILE 语句可以非常快速地把一个表转储到服务器上。如果想要在服务器主机之外的部分客户主机上创建结果文件，
不能使用 SELECT...INTO OUTFILE 语句。在这种情况下，应该在客户主机上使用 mysql -e “SELECT ... " > file_name 这样的命令，来生成文件。

看看到默认情况下，MySQL 使用制表符“\t”分隔不同的字段，字段没有用其他字符括起来。Windows系统下的回车换行为“\r\n”，默认换行符为“\n”。
默认情况下，如果遇到 NULL 值，将会返回“\N”代表空值，反斜线“\”表示转义字符。如果使用 ESCAPED BY 选项，则N前面为指定的转义字符。

2. 用 mysqldump 命令导出文本文件
使用 mysqldump 工具不仅可以将数据导出为包含 CREATE、INSERT 的 sql 文件，也可以导出为纯文本文件。

Mysqldump 将创建一个包含 CREATE TABLE 语句的 tablename.sql 文件和一个包含其数据的 tablename.txt 文件。

mysqldump 导出文本文件的基本语法格式如下:

mysqldump -T path -u root -p dbname [tables] [OPTIONS]

--OPTION 选项
--fields-terminated-by=value
--fields-enclosed-by=value
--fields-optionally-enclosed-by=value
--fields-escaped-by=value
--lines-terminated-by=value

  只有指定了 -T 参数才可以导出纯文本文件；path 表示导出数据的目录；tables 为指定要导出的表名，如果不指定，将导出数据库 dbname 中所有的表； [ OPTIONS] 为可选参数选项，这些选项需要结合-T 选项使用。

OPTIONS 常见的取值如下:

  --fields-terminated-by=value:设置字段之间的分隔符可以为单个或多个字符，默认情况下为制表符“\t”。
 --fields-enclosed-by=value: 设置字段的包围字符。
 --fields-optionally-enclosed-by=value： 设置字段的包围字符，只能为单个字符，包括 CHAR 和 VARCHAR 等字符数据字段。
  --fields-escaped-by=value： 控制如何写入或读取特殊字符，只能为单个字符，即设置转义字符，默认值为“\”。
 --lines-terminated-by=value：设置每行数据结尾的字符，可以为单个或多个字符，默认值为“\n”。


3. 用 mysql 命令导出文本文件
  相比mysqldump，mysql工具导出的结果可读性更强。

使用 mysql 导出数据文本文件语句的基本格式：

mysql -u root -p --execute= "SELECT 语句" dbname >filename.txt

-execute 选项表示执行该选项后面的语句并退出，后面的语句必须用双引号括起来，dbname 为要导出的数据库名称；
导出的文件中不同列之间使用制表符分隔，第1行包含各字段的名称。
使用 --vertical  参数显示结果。




====================================================MYSQL导入数据文件命令==============================================================

mysql 5.5.7以上不行 必须修改全局变量local_infile=1  还要以mysql --local-file=1 启动
 
 1.用 LOAD DATA INFILE 导入文本文件
  语法格式如下：

LOAD DATA  INFILE  'filename.txt'  INTO  TABLE   tablename  [OPTIONS]  [IGNORE number LINES]

--OPTIONS 选项
　　FIELDS  TERMINATED  BY  'value'   /*设置字段之间分隔符，单个或多个字符，默认为'\t'*/
　　FIELDS  [OPTIONALLY]  ENCLOSEED BY  'value'  /*设置字段包围分隔符，单个字符*/
　　FIELDS  ESCAPED  BY  'value'     /*如何写入或读取特殊字符，单个字符*/
　　LINES  STARTING BY  'value'     /*每行数据开头的字符，单个或多个*/
　　LINES  TERMINATED  BY  'value'   /*每行数据结尾的字符，单个或多个*/

2.用 mysqlimport 命令导入文本文件
 使用 mysqlimport 可以导入文本文件，并且不需要登录 MySQL 客户端。mysqlimport 命令提供了许多与LOAD DATA INFILE 语句相同的功能。
 使用 mysqlimport 语句需要指定所需的选项、导入的数据库名称以及导入的数据文件的路径和名称。

语法格式如下：

 mysqlimport -u root -p dbname filename.txt [OPTIONS]
 
 --fields-terminated-by=字符串：设置字符串为字段之间的分隔符，可以为单个或多个字符。默认值为制表符“\t”。
-L, --local：表示从客户端任意路径读取文件导入表中，未设置该选项时，默认只从datadir下同名数据库目录下读取文件导入
--ignore-lines=n：表示可以忽略前n行。
-l, --lock-tables：写入时锁定所有表
-p, --password[=name]：指定用户密码
-u, --user=name：指定登入MySQL用户名
-h, --host=name：指定远程连接的服务器
-c, --columns=name：往表里导入指定字段，如：--columns='Name,Age,Gender'
-C, --compress：在客户端和服务器之间启用压缩传递所有信息

 --OPTION 选项
 --fields-terminated-by=value
 --fields-enclosed-by=value
 --fields-optionally-enclosed-by=value
 --fields-escaped-by=value
 --lines-terminated-by=value
 --ignore-lines=n



  dbname 为导入的表所在的数据库名称。mysqlimport 命令不指定导入数据库的表名称，数据表的名称由导入文件的名称确定，即文件名作为表名，导入数据之前该表必须存在。


OPTIONS 为可选参数选项，其常见的取值如下：

 --fields-terminated-by=value:设置字段之间的分隔符，可以为单个或多个字符，默认情况下为制表符“\t”。
 --fields-enclosed-by=value: 设置字段的包围字符。
 --fields-optionally-enclosed-by=value： 设置字段的包围字符，只能为单个字符，只包括 CHAR 和 VARCHAR 等字符数据字段。
  --fields-escaped-by=value： 控制如何写入或读取特殊字符，只能为单个字符，即设置转义字符，默认值为“\”。
 --lines-terminated-by=value：设置每行数据结尾的字符，可以为单个或多个字符，默认值为“\n”。
--ignore-lines=n： 忽视数据文件的前 n 行

【注】双引号要用转义字符
mysql转义字符
\0
一个ASCII 0 (NUL)字符。
\n
一个新行符。
\t
一个定位符。
\r
一个回车符。
\b
一个退格符。
\ '
一个单引号(“ '”)符。
\ "
一个双引号(“ "”)符。
\\
一个反斜线(“\”)符。
\%
一个“%”符。它用于在正文中搜索“%”的文字实例，否则这里“%”将解释为一个通配符。
\_
一个“_”符。它用于在正文中搜索“_”的文字实例，否则这里“_”将解释为一个通配符。
注意，如果你在某些正文环境中使用“\%”或“\%_”，这些将返回字符串“\%”和“\_”而不是“%”和“_”。

有几种方法在一个字符串内包括引号：

一个字符串内用“ '”加引号的“ '”可以被写作为“ ' '”。
一个字符串内用“ "”加引号的“ "”可以被写作为“ " "”。
你可以把一个转义字符（“\”）放在引号前面。
一个字符串内用“ "”加引号的“ '”不需要特殊对待而且不必被重复或转义。同理，一个字符串内用“ '”加引号的与“ "”也不需要特殊对待。





==================================================================================================================

====================================================MYSQL常用函数==============================================================
current_timestamp() 当前时间戳

==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================
==================================================================================================================

route  add 10.0.0.0 mask 255.0.0.0   10.242.103.120